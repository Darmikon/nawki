{
	// http://eslint.org/docs/rules/
	"parser": "babel-eslint",
	//"rules": {
	//	"strict": 0
	//},

	"ecmaFeatures": {
		"arrowFunctions": true,                    // enable arrow functions
		"binaryLiterals": true,                    // enable binary literals
		"blockBindings": true,                     // enable let and const (aka block bindings)
		"classes": true,                           // enable classes
		"defaultParams": true,                     // enable default function parameters
		"destructuring": true,                     // enable destructuring
		"forOf": true,                             // enable for-of loops
		"generators": true,                        // enable generators
		"modules": true,                           // enable modules and global strict mode
		"objectLiteralComputedProperties": true,   // enable computed object literal property names
		"objectLiteralDuplicateProperties": true,  // enable duplicate object literal properties in strict mode
		"objectLiteralShorthandMethods": true,     // enable object literal shorthand methods
		"objectLiteralShorthandProperties": true,  // enable object literal shorthand properties
		"octalLiterals": true,                     // enable octal literals
		"regexUFlag": true,                        // enable the regular expression u flag
		"regexYFlag": true,                        // enable the regular expression y flag
		"restParams": true,                        // enable the rest parameters
		"spread": true,                            // enable the spread operator
		"superInFunctions": true,                  // enable super references inside of functions
		"templateStrings": true,                   // enable template strings
		"unicodeCodePointEscapes": true,           // enable code point escapes
		"globalReturn": true,                      // allow return statements in the global scope
		"jsx": true                                // enable JSX
	},

	"env": {
		"browser": true,      // browser global variables
		"node": true,         // Node.js global variables and Node.js-specific rules
		"amd": false,         // defines require() and define() as global variables as per the amd spec
		"mocha": false,       // adds all of the Mocha testing global variables
		"jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0
		"phantomjs": false,   // phantomjs global variables
		"jquery": false,      // jquery global variables
		"prototypejs": false, // prototypejs global variables
		"shelljs": false,     // shelljs global variables
		"es6": true			  //enable all ECMAScript 6 features except for modules.
	},

	"globals": {
		"console": true,
		"window": true,
		"document": true,
		"module": true
		// e.g. "angular": true
	},

	"plugins": [
		// e.g. "react" (must run `npm install eslint-plugin-react` first)
	],

	"rules": {
		////////// Possible Errors //////////

		"comma-dangle": [2,"never"],   // disallow trailing commas in object literals
		"no-cond-assign": 2,           // disallow assignment in conditional expressions
		"no-console": 0,               // disallow use of console (off by default in the node environment)
		"no-constant-condition": 2,    // disallow use of constant expressions in conditions
		//"no-control-regex": 0,       // disallow control characters in regular expressions
		"no-debugger": 0,              // disallow use of debugger
		"no-dupe-args": 2,             // disallow duplicate arguments in functions
		"no-dupe-keys": 2,             // disallow duplicate keys when creating object literals
		"no-duplicate-case": 2,        // disallow a duplicate case label
		"no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
		"no-empty": 2,                 // disallow empty statements
		"no-ex-assign": 2,             // disallow assigning to the exception in a catch block
		"no-extra-boolean-cast": 2,    // disallow double-negation boolean casts in a boolean context
		"no-extra-parens": 2,          // disallow unnecessary parentheses (off by default)
		"no-extra-semi": 2,            // disallow unnecessary semicolons
		"no-func-assign": 2,           // disallow overwriting functions written as function declarations
		"no-inner-declarations": 2,    // disallow function or variable declarations in nested blocks
		"no-invalid-regexp": 0,        // disallow invalid regular expression strings in the RegExp constructor
		"no-irregular-whitespace": 2,  // disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": 2,        // disallow negation of the left operand of an in expression
		"no-obj-calls": 0,             // disallow the use of object properties of the global object (Math and JSON) as functions
		"no-regex-spaces": 0,          // disallow multiple spaces in a regular expression literal
		"no-sparse-arrays": 0,         // disallow sparse arrays
		"no-unexpected-multiline": 2,  // Avoid code that looks like two expressions but is actually one (off by default)
		"no-unreachable": 2,           // disallow unreachable statements after a return, throw, continue, or//breakstatement
		"use-isnan": 2,                // disallow comparisons with the value NaN
		"valid-jsdoc": 2,              // Ensure JSDoc comments are valid (off by default)
		"valid-typeof": 2,             // Ensure that the results of typeof are compared against a valid string


		////////// Best Practices //////////

		"accessor-pairs": 0,        			// enforces getter/setter pairs in objects (off by default)
		"block-scoped-var": 2,      			// treat var statements as if they were block scoped (off by default)
		"complexity": 0,            			// specify the maximum cyclomatic complexity allowed in a program (off by default)
		"consistent-return": 0,     			// require return statements to either always or never specify values
		"curly": 2,                 			// specify curly brace conventions for all control statements
		"default-case": 0,                      // require default case in switch statements (off by default)
		"dot-location": [2,"property"],         // enforces consistent newlines before or after dots (off by default)
		"dot-notation": 0,          			// encourages use of dot notation whenever possible
		"eqeqeq": 2,                			// require the use of === and !==
		"guard-for-in": 2,          			// make sure for-in loops have an if statement (off by default)
		"no-alert": 0,              			// disallow the use of alert, confirm, and prompt
		"no-caller": 0,             			// disallow use of arguments.caller or arguments.callee
		"no-div-regex": 0,          			// disallow division operators explicitly at beginning of regular expression (off by default)
		"no-else-return": 2,        			// disallow else after a return in an if (off by default)
		"no-empty-label": 0,        			// disallow use of labels for anything other then loops and switches
		"no-empty-pattern": 2,					// disallow use of empty destructuring patterns
		"no-eq-null": 0,            			// disallow comparisons to null without a type-checking operator (off by default)
		"no-eval": 2,               			// disallow use of eval()
		"no-extend-native": 0,      			// disallow adding to native types
		"no-extra-bind": 2,         			// disallow unnecessary function binding
		"no-fallthrough": 0,        			// disallow fallthrough of case statements
		"no-floating-decimal": 0,   			// disallow the use of leading or trailing decimal points in numeric literals (off by default)
		"no-implied-eval": 0,       			// disallow use of eval()-like methods
		"no-iterator": 0,           			// disallow usage of __iterator__ property
//		"no-invalid-this": 2,					// disallow this keywords outside of classes or class-like objects
		"no-labels": 2,             			// disallow use of labeled statements
		"no-lone-blocks": 2,        			// disallow unnecessary nested blocks
		"no-loop-func": 2,          			// disallow creation of functions within loops
//		"no-magic-numbers": 2,					// disallow the use of magic numbers
		"no-multi-spaces": 2,       			// disallow use of multiple spaces
		"no-multi-str": 2,          			// disallow use of multiline strings
		"no-native-reassign": 2,    			// disallow reassignments of native objects
		"no-new-func": 2,           			// disallow use of new operator for Function object
		"no-new-wrappers": 2,       			// disallows creating new instances of String, Number, and Boolean
		"no-new": 2,                			// disallow use of new operator when not part of the assignment or comparison
		"no-octal-escape": 0,       			// disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		"no-octal": 2,              			// disallow use of octal literals
		"no-param-reassign": 0,     			// disallow reassignment of function parameters (off by default)
		"no-process-env": 0,        			// disallow use of process.env (off by default)
		"no-proto": 0,              			// disallow usage of __proto__ property
		"no-redeclare": 2,          			// disallow declaring the same variable more then once
		"no-return-assign": 2,      			// disallow use of assignment in return statement
		"no-script-url": 0,         			// disallow use of javascript: urls
		"no-self-compare": 0,       			// disallow comparisons where both sides are exactly the same (off by default)
		"no-sequences": 0,          			// disallow use of comma operator
		"no-throw-literal": 0,      			// restrict what can be thrown as an exception (off by default)
		"no-unused-expressions": 0, 			// disallow usage of expressions in statement position
		"no-useless-call": 2,					// disallow unnecessary .call() and .apply()
		"no-useless-concat": 0, 				// disallow unnecessary concatenation of literals or template literals
		"no-void": 0,               			// disallow use of void operator (off by default)
		"no-warning-comments": 0,   			// disallow usage of configurable warning terms in comments, e.g.
		"no-with": 2,               			// disallow use of the with statement
		"radix": 0,                 			// require use of the second argument for parseInt() (off by default)
		"vars-on-top": 2,           			// requires to declare all vars on top of their containing scope (off by default)
		"wrap-iife": [2, "inside"], 			// require immediate function invocation to be wrapped in parentheses (off by default)
		"yoda": 2,                  			// require or disallow Yoda conditions


		////////// Strict Mode //////////

		"strict": 2,          // controls location of Use Strict Directives


		////////// Variables //////////
		"init-declarations": 0,			  	// enforce or disallow variable initializations at definition
		"no-catch-shadow": 0,             	// disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
		"no-delete-var": 0,               	// disallow deletion of variables
		"no-label-var": 0,                	// disallow labels that share a name with a variable
		"no-shadow": 2,                   	// disallow declaration of variables already declared in the outer scope
		"no-shadow-restricted-names": 0,  	// disallow shadowing of names such as arguments
		"no-undef": 2, 						// disallow use of undeclared variables unless mentioned in a /*global */ block
		"no-undef-init": 2,               	// disallow use of undefined when initializing variables
		"no-undefined": 0,                	// disallow use of undefined variable (off by default)
		"no-unused-vars": 2,              	// disallow declaration of variables that are not used in the code
		"no-use-before-define": 0,        	// disallow use of variables before they are defined


		////////// Node.js //////////

		"handle-callback-err": 0,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
		"no-mixed-requires": 0,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
		"no-new-require": 0,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
		"no-path-concat": 0,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
		"no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
		"no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
		"no-sync": 0,               // disallow use of synchronous methods (off by default)


		////////// Stylistic Issues //////////

		"array-bracket-spacing": [2,"never"],       													// enforce spacing inside array brackets (off by default)
		"block-spacing": [2, "never"],																	//disallow or enforce spaces inside of single line blocks (fixable)
		"brace-style": [2, "1tbs"],		 																// enforce one true brace style (off by default)
		"camelcase": 2,                   																// require camel case names
		"comma-spacing":[2, {"before": false, "after": false}], 										// enforce spacing before and after comma
		"comma-style": [2,"first"],                 													// enforce one true comma style (off by default)
		"computed-property-spacing": [2, "never"],  													// require or disallow padding inside computed properties (off by default)
//		"consistent-this": [2, "that"],             													// enforces consistent naming when capturing the current execution//context (off by default)
		"eol-last": 0,                    																// enforce newline at the end of file, with no multiple empty lines
		"func-names": 0,                  																// require function expressions to have a name (off by default)
		"func-style": [2, "declaration"],                  												// enforces use of function declarations or expressions (off by default)
//		"id-length": [2, {"min": 2, "max": 20, "properties": "never", "exceptions": ["i","j","k"]}], 	//this//option//enforces minimum and maximum identifier lengths (variable names, property names etc.)
		"id-match": 0,					  																// require identifiers to match the provided regular expression
//		"indent": [2, "tab",{"VariableDeclarator": 2}],													//this//option sets a specific tab width for //your code (off by default)
		"jsx-quotes": [2,"prefer-single"],	  															// specify whether double or single quotes should be used in JSX//attributes
		"key-spacing": [2, {"beforeColon": false, "afterColon": true}],    								// enforces spacing between keys and values in object literal properties
		"linebreak-style": 0,             																// disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
		"lines-around-comment": [2, { "beforeBlockComment": true, "beforeLineComment": false }],        // enforces//empty	lines around comments (off by default)
		"max-nested-callbacks": [2,3],        															// specify //the maximum depth callbacks can be nested (off by default)
		"new-cap": 2,                     																// require a capital letter for constructors
		"new-parens": 0,                  																// disallow the omission of parentheses when invoking a constructor with no arguments
		"new-parens": 0,                  																// disallow the omission of parentheses when invoking a constructor with no arguments
		"newline-after-var": 2,           																// allow/disallow an empty newline after var statement (off by default)
		"no-array-constructor": 2,        																// disallow use of the Array constructor
		"no-continue": 0,                 																// disallow use of the continue statement (off by default)
		"no-inline-comments": 0,         								 								// disallow comments inline after code (off by default)
		"no-lonely-if": 2,                																// disallow if as the only statement in an else block (off by default)
		"no-mixed-spaces-and-tabs": 2,    																// disallow mixed spaces and tabs for indentation
		"no-multiple-empty-lines": [2,{"max": 1}],     													// disallow multiple empty lines (off by default)
		"no-nested-ternary": 2,           																// disallow nested ternary expressions (off by default)
		"no-new-object": 2,               																// disallow use of the Object constructor
//		"no-restricted-syntax": [2, "FunctionExpression", "WithStatement"], 							// disallow use of certain//syntax in code
		"no-spaced-func": 2,              																// disallow space between function identifier and application
		"no-ternary": 0,                  																// disallow the use of ternary operators (off by default)
		"no-trailing-spaces": 0,          																// disallow trailing whitespace at the end of lines
		"no-underscore-dangle": 0,        																// disallow dangling underscores in identifiers
		"no-unneeded-ternary": 2,		  																// disallow the use of ternary operators when a simpler alternative exists
		"object-curly-spacing": [2, "never"], 															// require or//disallow padding inside curly braces (fixable)
		"one-var": 2,                     																// allow just one var statement per function (off by default)
		"operator-assignment": 0,         																// require assignment operator shorthand where possible or prohibit it entirely (off by default)
		"operator-linebreak": [2, "before"],															////enforce//operators to//be//placed before or after line breaks (off by default)
		"padded-blocks": [2, "never"],               													// enforce padding within blocks (off by default)
		"quote-props": [2, "as-needed"],                 												// require quotes around object literal property names (off by default)
		"quotes": [2, "single", "avoid-escape"],                      									// specify whether//double or single quotes should be used
		"require-jsdoc": 0,				  																// Require//JSDoc comment
		"semi-spacing": [2, {"before": false, "after": false}],                							// enforce spacing before and after//semicolons
		"semi": [2, "always"],            																// require or disallow use of semicolons instead of ASI
		"sort-vars": 0,                   																// sort variables within the same declaration block (off by default)
		"space-after-keywords": [2, "never"],        													// require a space after certain keywords (off by default)
		"space-before-blocks": [2, "never"],         													// require or disallow space before blocks (off by default)
		"space-before-keywords": [2, "never"],        													// require a space before certain keywords (off by default)
		"space-before-function-paren": [2, "never"], 													// require or disallow space before function opening parenthesis (off by default)
		"space-in-parens": [2, "never"],             													// require or disallow spaces inside parentheses (off by default)
		"space-infix-ops": [2, {"int32Hint": false}],             										// require spaces around operators
		"space-return-throw-case": 2,     																// require a space after return, throw, and case
		"space-unary-ops": 2,             																// require or disallow spaces before/after unary operators (words on by//default, nonwords off by default)
		"spaced-comment": 0,              																// require or disallow a space immediately following the // or /* in a comment (off by default)
		"wrap-regex": 0,                  																// require regex literals to be wrapped in parentheses (off by default)


		////////// ECMAScript 6 //////////

		"arrow-parens": 0,			 								// require parens in arrow function arguments
		"arrow-spacing": [2, { "before": false, "after": false }],  // require space before/after//arrow//function's//arrow (fixable)
		"constructor-super": 2,      								// verify super() callings in constructors (off by default)
		"generator-star-spacing": 0, 								// enforce the spacing around the * in generator functions (off by default)
		"no-class-assign": 2,		 								// disallow modifying variables of class declarations
		"no-const-assign": 2,		 								// disallow modifying variables that are declared using const
		"no-dupe-class-members": 2,	 								// disallow duplicate name in class members
		"no-this-before-super": 2,   								// disallow use of this/super before calling super() in constructors.
		"no-this-before-super": 0,   								// disallow to use this/super before super() calling in constructors (off by default)
		"no-var": 0,                								// require let or const instead of var (off by default)
		"object-shorthand": [2, "always"],      					// require method and property shorthand syntax for object literals (off by//default)
		"prefer-arrow-callback": 2, 								//suggest using arrow functions as callbacks
		"prefer-const": 2,           								// suggest using of const declaration for variables that are never modified//after declared (off by default)
		"prefer-reflect": 0,										// suggest using Reflect methods where applicable
		"prefer-spread": 0,			 								// suggest using the spread operator instead of .apply().
		"prefer-template": 2,		 								// suggest using template literals instead of strings concatenation
		"require-yield": 2,			 								// disallow generator functions that do not have yield


		////////// Legacy //////////

		"max-depth": [2, 4],       // specify the maximum depth that blocks can be nested (off by default)
		"max-len": [2, 120],         // specify the maximum length of a line in your program (off by default)
		"max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
		"max-statements": 0,  // specify the maximum number of statement allowed in a function (off by default)
		"no-bitwise": 0,      // disallow use of bitwise operators (off by default)
		"no-plusplus": 0      // disallow use of unary operators, ++ and -- (off by default)
	}
}
